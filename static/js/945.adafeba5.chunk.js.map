{"version":3,"file":"static/js/945.adafeba5.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/Alert/Alert.jsx","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","pages/Contacts.jsx"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const getContacts = state => state.contacts.items;\nexport const getIsLoading = state => state.contacts.isLoading;\nexport const getError = state => state.contacts.error;\nexport const getFilter = state => state.filter;\n\nexport const getVisibleContacts = createSelector(\n    [getContacts, getFilter],\n    (contacts, filter) => {\n        return contacts.filter(contact =>\n            contact.name.toLowerCase().includes(filter.toLowerCase())\n        );\n    }\n);","import { Snackbar, Alert } from '@mui/material';\n\nexport const AlertMessage = ({ contactName, isOpen, handleClose }) => {\n  return (\n    <Snackbar\n      open={isOpen}\n      autoHideDuration={1500}\n      onClose={handleClose}\n    >\n      <Alert severity=\"error\" sx={{ width: '100%' }}>\n        {contactName} is already in contacts.\n      </Alert>\n    </Snackbar>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useState } from 'react';\nimport { nanoid } from '@reduxjs/toolkit';\nimport { getContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\nimport { AlertMessage } from '../Alert/Alert';\nimport { Box, TextField, IconButton, Button, Dialog, DialogTitle, DialogContent} from '@mui/material';\nimport AddIcon from '@mui/icons-material/Add';\nimport CloseIcon from '@mui/icons-material/Close';\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const [open, setOpen] = useState(false);\n  const [openAlert, setOpenAlert] = useState(false);\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleNameChange = evt => {\n    setName(evt.target.value);\n  };\n\n  const handleNumberChange = evt => {\n    setNumber(evt.target.value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const contactName = contacts.find(contact => contact.name.toLowerCase() === name.toLowerCase());\n                \n    if (contactName) {\n      return setOpenAlert(true);\n    }\n    dispatch(addContact({ id: nanoid(), name, number }));\n    handleClose();\n    resetState();\n  };\n\n  const resetState = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <>\n    <Button variant=\"outlined\" sx={{height:{sm:40}, minWidth:{sm:185}}} onClick={handleClickOpen} startIcon={<AddIcon />}>\n        Create contact\n      </Button>\n      <Dialog open={open} onClose={handleClose} fullWidth maxWidth='sm'>\n        <DialogTitle textAlign='center' sx={{ pb:0, fontSize: 24, fontWeight: 500, textTransform: 'uppercase' }}>New contact</DialogTitle>\n        <IconButton\n          aria-label=\"close\"\n          onClick={handleClose}\n          sx={{\n            position: 'absolute',\n            right: 8,\n            top: 8,\n            color: (theme) => theme.palette.grey[500],\n          }}\n        >\n          <CloseIcon />\n        </IconButton>\n        <DialogContent sx={{pt:0}}>\n          <Box\n      component=\"form\"\n      sx={{\n        '& .MuiTextField-root': { mt: 2, mb: 2 }\n      }}\n      onSubmit={handleSubmit}\n      autoComplete=\"off\"\n    >\n      <TextField\n        fullWidth\n        sx={{ display: 'block' }}\n        id=\"name\"\n        label=\"Name\"\n        inputProps={{ inputMode: 'text'}}\n        value={name}\n        onChange={handleNameChange}\n        required\n      />\n      <TextField\n        fullWidth\n        sx={{ display: 'block' }}\n        id=\"number\"\n        label=\"Number\"\n        inputProps={{ inputMode: 'tel', pattern: '[0-9]*' }}\n        value={number}\n        onChange={handleNumberChange}\n        required\n      />\n      <Button fullWidth sx={{p: 2 }} variant=\"contained\" type=\"submit\">\n        Add contact\n      </Button>\n          </Box>\n           </DialogContent>\n      </Dialog>\n      <AlertMessage contactName={name} isOpen={openAlert} handleClose={setOpenAlert}/>\n      </>\n  );\n};\n\nexport { ContactForm };\n","import {\n  Avatar,\n  IconButton,\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n} from '@mui/material';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport {\n  getContacts,\n  getError,\n  getIsLoading,\n  getVisibleContacts,\n} from 'redux/contacts/selectors';\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n  const isLoading = useSelector(getIsLoading);\n  const error = useSelector(getError);\n  const visibleContacts = useSelector(getVisibleContacts);\n\n  function stringToColor(string) {\n    let hash = 0;\n    let i;\n\n    /* eslint-disable no-bitwise */\n    for (i = 0; i < string.length; i += 1) {\n      hash = string.charCodeAt(i) + ((hash << 5) - hash);\n    }\n\n    let color = '#';\n\n    for (i = 0; i < 3; i += 1) {\n      const value = (hash >> (i * 8)) & 0xff;\n      color += `00${value.toString(16)}`.slice(-2);\n    }\n    /* eslint-enable no-bitwise */\n    return color;\n  }\n\n  function stringAvatar(name) {\n    return {\n      sx: {\n        bgcolor: stringToColor(name),\n        textTransform: 'capitalize',\n      },\n      children: `${name.split(' ')[0][0]}`,\n    };\n  }\n\n  return (\n    <List>\n      {isLoading && !error ? (\n        <b>Request in progress...</b>\n      ) : contacts.length === 0 && !error ? (\n        <p>Add your first contact.</p>\n      ) : (\n        visibleContacts.map(({ id, name, number }) => (\n          <ListItem key={id}>\n            <ListItemAvatar>\n              <Avatar {...stringAvatar(`${name}`)}></Avatar>\n            </ListItemAvatar>\n            <ListItemText sx={{ textTransform: 'capitalize' }}>\n              {name}: {number}\n            </ListItemText>\n            <IconButton onClick={() => dispatch(deleteContact(id))}>\n              <DeleteIcon />\n            </IconButton>\n          </ListItem>\n        ))\n      )}\n    </List>\n  );\n};\n\nexport { ContactList };\n","import { useSelector, useDispatch } from \"react-redux\";\nimport { getFilter } from \"redux/contacts/selectors\";\nimport { changeFilter } from \"redux/contacts/filterSlice\";\nimport { TextField } from \"@mui/material\";\n\nconst Filter = () => {\n    const filterQuery = useSelector(getFilter);\n    const dispatch = useDispatch();\n\n    return (\n        <TextField\n            fullWidth\n            sx={{ display: 'block' }}\n            id=\"filter\"\n            type=\"search\"\n            label=\"Find contacts by name\"\n            value={filterQuery}\n            onChange={(e) => dispatch(changeFilter(e.target.value))}>\n        </TextField>\n)}\n\nexport { Filter }","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { Container, Typography, Box } from '@mui/material';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Container maxWidth=\"xl\" sx={{ mt: 2, }}>\n      <Box sx={{display:{sm:'flex'}, gap:{sm:3}}}>\n          <ContactForm />\n        <Box sx={{width:{sm:'100%'}, textAlign: 'center', mt:{xs:2, sm:0}}}>\n      <Typography variant='h3' sx={{fontSize:{xs:36, sm:48}, mb: 2, textTransform:'uppercase'}}>My contacts</Typography>\n      <Filter />\n          <ContactList />\n          </Box>\n        </Box>\n    </Container>\n  );\n}"],"names":["getContacts","state","contacts","items","getIsLoading","isLoading","getError","error","getFilter","filter","getVisibleContacts","createSelector","contact","name","toLowerCase","includes","AlertMessage","_ref","contactName","isOpen","handleClose","_jsx","Snackbar","open","autoHideDuration","onClose","children","_jsxs","Alert","severity","sx","width","ContactForm","_useState","useState","_useState2","_slicedToArray","setName","_useState3","_useState4","number","setNumber","_useState5","_useState6","setOpen","_useState7","_useState8","openAlert","setOpenAlert","dispatch","useDispatch","useSelector","resetState","_Fragment","Button","variant","height","sm","minWidth","onClick","startIcon","AddIcon","Dialog","fullWidth","maxWidth","DialogTitle","textAlign","pb","fontSize","fontWeight","textTransform","IconButton","position","right","top","color","theme","palette","grey","CloseIcon","DialogContent","pt","Box","component","mt","mb","onSubmit","e","preventDefault","find","addContact","id","nanoid","autoComplete","TextField","display","label","inputProps","inputMode","value","onChange","evt","target","required","pattern","p","type","ContactList","visibleContacts","stringToColor","string","i","hash","length","charCodeAt","concat","toString","slice","stringAvatar","bgcolor","split","List","map","ListItem","ListItemAvatar","Avatar","_objectSpread","ListItemText","deleteContact","DeleteIcon","Filter","filterQuery","changeFilter","Contacts","useEffect","fetchContacts","Container","gap","xs","Typography"],"sourceRoot":""}